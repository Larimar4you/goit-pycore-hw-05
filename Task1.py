"""Замикання в програмуванні - це функція, яка зберігає посилання на змінні зі свого лексичного контексту, тобто з області, де вона була оголошена.

Реалізуйте функцію caching_fibonacci, яка створює та використовує кеш для зберігання і повторного використання вже обчислених значень чисел Фібоначчі.



Ряд Фібоначчі - це послідовність чисел виду: 0, 1, 1, 2, 3, 5, 8, ..., де кожне наступне число послідовності виходить додаванням двох попередніх членів ряду.

У загальному вигляді для обчислення n-го члена ряду Фібоначчі потрібно вирахувати вираз:
F(n) = F(n-1) + F(n-2), де F(0) = 0, F(1) = 1.

Це завдання можна вирішити рекурсивно, викликаючи функцію, що обчислює числа послідовності доти, доки виклик не сягне членів ряду менше n = 1, де послідовність задана.
"""

"""
"""
# # Написать простую внешнюю функцию.
# def outer_function(x):
#     def inner_function(y):  # Внутри неё создать внутреннюю функцию.

#         return x + y  # Использовать переменные внешней функции внутри внутренней.

#     return inner_function  # return inner — чтобы внутренняя функция “жила” после выхода из внешней.


# # Пример использования:

# add_five = outer_function(5)  # создаём функцию, которая всегда прибавляет 5
# print(add_five(10))  # 15
# print(add_five(2))  # 7


def caching_fibonacci():
    cache = {}  # Створюємо кеш для зберігання обчислених значень

    def fibonacci(n):
        if n in cache:  # Перевіряємо, чи є значення в кеші
            return cache[n]  # функция должна возвращать значение кэша
        if n == 0:
            result = 0
        elif n == 1:
            result = 1
        else:
            result = fibonacci(n - 1) + fibonacci(
                n - 2
            )  # Рекурсивний виклик Использование рекурсии для вычисления чисел Фибоначчи.
        cache[n] = result  # Зберігаємо обчислене значення в кеш
        return result  # функция должна возвращать значение кэша

    return fibonacci  # Повертаємо внутрішню функцію


# Используем функцию fibonacci для вычисления чисел Фибоначчи
fibonacci = caching_fibonacci()
print(fibonacci(10))  # 55
print(fibonacci(15))  # 610
